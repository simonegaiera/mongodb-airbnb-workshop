
resource "aws_iam_openid_connect_provider" "eks_oidc" {
  client_id_list  = ["sts.amazonaws.com"]
  url             = aws_eks_cluster.eks_cluster.identity[0].oidc[0].issuer

  depends_on = [ aws_eks_cluster.eks_cluster ]
}

data "aws_caller_identity" "current" {}

resource "aws_iam_role" "cluster_autoscaler_role" {
  name = "cluster-autoscaler-role"
  
  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Principal = {
          Service = "eks.amazonaws.com"
        },
        Action = "sts:AssumeRole"
      },
      {
        Effect = "Allow",
        Principal = {
          Federated = "arn:aws:iam::${data.aws_caller_identity.current.account_id}:oidc-provider/${replace(aws_eks_cluster.eks_cluster.identity[0].oidc[0].issuer, "https://", "")}"
        },
        Action = "sts:AssumeRoleWithWebIdentity",
        Condition = {
          StringEquals = {
            "${replace(aws_eks_cluster.eks_cluster.identity[0].oidc[0].issuer, "https://", "")}:sub" = "system:serviceaccount:kube-system:cluster-autoscaler"
          }
        }
      }
    ]
  })

  depends_on = [
    aws_eks_node_group.node_group,
    aws_iam_openid_connect_provider.eks_oidc
  ]
}

resource "aws_iam_role_policy_attachment" "cluster_autoscaler_policy" {
  policy_arn = "arn:aws:iam::aws:policy/AutoScalingFullAccess"
  role       = aws_iam_role.cluster_autoscaler_role.name
}

resource "helm_release" "cluster_autoscaler" {
  name       = "cluster-autoscaler"
  repository = "https://kubernetes.github.io/autoscaler"
  chart      = "cluster-autoscaler"
  namespace  = "kube-system"

  # This is your existing inline values YAML
  values = [
    <<EOF
    autoDiscovery:
      clusterName: "${var.cluster_name}"
    awsRegion: "${var.aws_region}"
    rbac:
      serviceAccount:
        name: "cluster-autoscaler"
    extraArgs:
      skip-nodes-with-local-storage: false
      expander: least-waste
    EOF
  ]

  set {
    name  = "rbac.serviceAccount.annotations.eks\\.amazonaws\\.com/role-arn"
    value = aws_iam_role.cluster_autoscaler_role.arn
  }

  set {
    name  = "autoscalingGroups[0].name"
    value = "eks-node-group-${var.cluster_name}"
  }

  set {
    name  = "autoscalingGroups[0].minSize"
    value = 1
  }

  set {
    name  = "autoscalingGroups[0].maxSize"
    value = 10
  }
  
  depends_on = [
    aws_eks_node_group.node_group,
    aws_iam_role.cluster_autoscaler_role,
    aws_iam_role.node_role
  ]
}
